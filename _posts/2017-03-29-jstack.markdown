---
layout: post
title:  使用jstack分析CPU占用过高的java线程
date: 2017-03-29
---

最近做的一个需求，需求转测试后发现对应服务的CPU占用率高达百分之一百多（我们使用的是8核32G内存的云主机）。
生怕到了现网生产环境后出事故，就赶紧定位了下。由于公司内有安全限制，无法写博客，所以我只能对分析方法和过程做个大概描述，
无法贴上真实的图片(只能从网上盗图)。过程大致如下：

##### 通过top命令查看占用CPU最高的进程
![top命令查看CPU占用情况]({{ site.url }}/images/17-3-29/top_cmd.png)
可以看到上图中PID（进程号）为28555的进程占用CPU高达200%。

##### 通过ps命令查找进程内占用CPU最高的线程
![ps命令查找进程内各线程占用CPU情况]({{ site.url }}/images/17-3-29/ps_cmd.png)

可以看出上图中TID（线程号）为28802的线程占用了60.4%的CPU。
上图中的命令完全可以改为：
```
ps -mp PID -o THREAD,tid,time|sort -rn
```
该命令会对进程内各线程使用的CPU情况做个排序，最上边的就是占用CPU最高的线程。

#####将对应的TID转换为16进制格式：

printf "%x\n" tid
![TID转换]({{ site.url }}/images/17-3-29/convert_tid.png)

##### 通过jstack查看线程堆栈
在jdk的bin目录下执行如下命令:
```
./jstack -F PID|grep TID -A lines
```
注意：命令中的PID需要替换成进程号，TID替换为线程号，lines替换为你想在屏幕打印出的堆栈行数

![TID转换]({{ site.url }}/images/17-3-29/jstack.png)
#####找到相应的代码进行分析